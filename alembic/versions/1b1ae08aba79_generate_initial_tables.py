"""generate initial tables

Revision ID: 1b1ae08aba79
Revises: 
Create Date: 2024-08-29 12:09:20.206229

"""

from typing import Sequence, Union

import sqlalchemy as sa
from sqlalchemy.dialects.postgresql.json import JSONB

from alembic import op
from nwc_backend.db import UUID

# revision identifiers, used by Alembic.
revision: str = "1b1ae08aba79"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "client_app",
        sa.Column("client_id", sa.String(length=255), nullable=False),
        sa.Column("app_name", sa.String(length=255), nullable=True),
        sa.Column("display_name", sa.String(length=255), nullable=True),
        sa.Column("image_url", sa.String(length=255), nullable=True),
        sa.Column(
            "verification_status",
            sa.Enum("VERIFIED", "INVALID", "UNKNOWN", name="nip05verificationstatus"),
            nullable=True,
        ),
        sa.Column("id", UUID(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("client_id", name="client_app_unique_client_id"),
    )
    op.create_table(
        "user",
        sa.Column("vasp_user_id", sa.String(length=255), nullable=False),
        sa.Column("uma_address", sa.String(length=255), nullable=False),
        sa.Column("id", UUID(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("uma_address", name="user_unique_uma_address"),
        sa.UniqueConstraint("vasp_user_id", name="user_unique_vasp_user_id"),
    )
    op.create_table(
        "nwc_connection",
        sa.Column("user_id", UUID(), nullable=False),
        sa.Column("client_app_id", UUID(), nullable=False),
        sa.Column(
            "supported_commands",
            sa.JSON().with_variant(JSONB(astext_type=sa.Text()), "postgresql"),
            nullable=False,
        ),
        sa.Column("long_lived_vasp_token", sa.String(length=255), nullable=True),
        sa.Column("connection_expires_at", sa.Integer(), nullable=True),
        sa.Column("spending_limit_amount", sa.BigInteger(), nullable=True),
        sa.Column("spending_limit_currency_code", sa.String(length=3), nullable=True),
        sa.Column(
            "spending_limit_frequency",
            sa.Enum(
                "DAILY",
                "WEEKLY",
                "MONTHLY",
                "YEARLY",
                "NONE",
                name="spendinglimitfrequency",
                native_enum=False,
            ),
            nullable=True,
        ),
        sa.Column("id", UUID(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["client_app_id"],
            ["client_app.id"],
            name="nwc_connection_client_app_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
            name="nwc_connection_user_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "app_connection",
        sa.Column("nwc_connection_id", UUID(), nullable=False),
        sa.Column("nostr_pubkey", sa.String(length=255), nullable=False),
        sa.Column("access_token", sa.String(length=255), nullable=False),
        sa.Column("refresh_token", sa.String(length=255), nullable=False),
        sa.Column("authorization_code", sa.String(length=255), nullable=False),
        sa.Column("access_token_expires_at", sa.Integer(), nullable=False),
        sa.Column("refresh_token_expires_at", sa.Integer(), nullable=False),
        sa.Column("authorization_code_expires_at", sa.Integer(), nullable=False),
        sa.Column(
            "status",
            sa.Enum(
                "ACTIVE",
                "INACTIVE",
                "EXPIRED",
                "REVOKED",
                name="appconnectionstatus",
                native_enum=False,
            ),
            nullable=False,
        ),
        sa.Column("id", UUID(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["nwc_connection_id"],
            ["nwc_connection.id"],
            name="app_connection_nwc_connection_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("access_token", name="app_connection_unique_access_token"),
        sa.UniqueConstraint(
            "authorization_code", name="app_connection_unique_authorization_code"
        ),
        sa.UniqueConstraint("nostr_pubkey", name="app_connection_unique_nostr_pubkey"),
    )
    with op.batch_alter_table("app_connection", schema=None) as batch_op:
        batch_op.create_index(
            "app_connection_nwc_connection_unique_idx",
            ["nwc_connection_id"],
            unique=True,
            postgresql_where=sa.text("status = 'ACTIVE'"),
            sqlite_where=sa.text("status = 'ACTIVE'"),
        )
        batch_op.create_index(
            batch_op.f("ix_app_connection_refresh_token"),
            ["refresh_token"],
            unique=False,
        )

    op.create_table(
        "nip47_request",
        sa.Column("app_connection_id", UUID(), nullable=False),
        sa.Column("event_id", sa.String(length=255), nullable=False),
        sa.Column(
            "method",
            sa.Enum(
                "PAY_INVOICE",
                "MAKE_INVOICE",
                "LOOKUP_INVOICE",
                "GET_BALANCE",
                "GET_INFO",
                "LIST_TRANSACTIONS",
                "PAY_KEYSEND",
                "LOOKUP_USER",
                "FETCH_QUOTE",
                "EXECUTE_QUOTE",
                "PAY_TO_ADDRESS",
                name="nip47requestmethod",
                native_enum=False,
            ),
            nullable=False,
        ),
        sa.Column(
            "params",
            sa.JSON().with_variant(JSONB(astext_type=sa.Text()), "postgresql"),
            nullable=False,
        ),
        sa.Column("response_event_id", sa.String(length=255), nullable=True),
        sa.Column(
            "response_result",
            sa.JSON().with_variant(JSONB(astext_type=sa.Text()), "postgresql"),
            nullable=True,
        ),
        sa.Column(
            "response_error_code",
            sa.Enum(
                "RATE_LIMITED",
                "NOT_IMPLEMENTED",
                "INSUFFICIENT_BALANCE",
                "PAYMENT_FAILED",
                "NOT_FOUND",
                "QUOTA_EXCEEDED",
                "RESTRICTED",
                "UNAUTHORIZED",
                "INTERNAL",
                "OTHER",
                name="errorcode",
                native_enum=False,
            ),
            nullable=True,
        ),
        sa.Column("id", UUID(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["app_connection_id"],
            ["app_connection.id"],
            name="nip47_request_app_connection_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("nip47_request")
    with op.batch_alter_table("app_connection", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_app_connection_refresh_token"))
        batch_op.drop_index(
            "app_connection_nwc_connection_unique_idx",
            postgresql_where=sa.text("status = 'ACTIVE'"),
            sqlite_where=sa.text("status = 'ACTIVE'"),
        )

    op.drop_table("app_connection")
    op.drop_table("nwc_connection")
    op.drop_table("user")
    op.drop_table("client_app")
    # ### end Alembic commands ###
